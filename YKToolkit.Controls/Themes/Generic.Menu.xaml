<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/YKToolkit.Controls;component/Themes/DefaultColors.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />
    <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
    <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry> 

    <!-- RepeatButton for MenuScrollViewer -->
    <Style x:Key="MenuScrollButton" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
        <Setter Property="ClickMode" Value="Hover" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="Border" Background="Transparent" Padding="1">
                        <ContentPresenter x:Name="ContentContainer" Margin="2,2,2,2" VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource SelectedColor}" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ContentContainer" Property="Margin" Value="3,3,1,1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ScrollViewer for a MenuItem -->
    <Style x:Key="MenuScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1" Grid.Column="0">
                            <ScrollContentPresenter Margin="{TemplateBinding Padding}" />
                        </Border>
                        <RepeatButton Grid.Row="0" Grid.Column="0"
                                      Style="{StaticResource MenuScrollButton}"
                                      Command="{x:Static ScrollBar.LineUpCommand}"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      Focusable="False">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed"
                                              Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                              ConverterParameter="0">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedVerticalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Data="{StaticResource UpArrow}">
                                <Path.Fill>
                                    <SolidColorBrush Color="{DynamicResource ForegroundColor}" />
                                </Path.Fill>
                            </Path>
                        </RepeatButton>
                        <RepeatButton Grid.Row="2" Grid.Column="0"
                                      Style="{StaticResource MenuScrollButton}"
                                      Command="{x:Static ScrollBar.LineDownCommand}"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      Focusable="False">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed"
                                              Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                              ConverterParameter="100">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedVerticalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Data="{StaticResource DownArrow}">
                                <Path.Fill>
                                    <SolidColorBrush Color="{DynamicResource ForegroundColor}" />
                                </Path.Fill>
                            </Path>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Menu}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{StaticResource DefaultForegroundBrush}" />
        <Setter Property="Background" Value="{StaticResource DefaultWindowBackgroundBrush}" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush>
                    <GradientStop Color="{DynamicResource BorderColor}" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <StackPanel ClipToBounds="True" Orientation="Horizontal" IsItemsHost="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for a Separator -->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="4,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Height="1" Margin="{TemplateBinding Margin}">
                        <Path Stretch="Fill" Data="M0,0 L 1,0">
                            <Path.Stroke>
                                <SolidColorBrush Color="{DynamicResource BorderColor}" />
                            </Path.Stroke>
                        </Path>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1,1,1,0">
            <Grid>
                <Border x:Name="container">
                    <ContentPresenter ContentSource="Header" Margin="6,3,6,3" RecognizesAccessKey="True" />
                </Border>
                <Popup x:Name="Popup"
                       Placement="Relative"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True"
                       Focusable="False"
                       PopupAnimation="Fade"
                       HorizontalOffset="-1"
                       VerticalOffset="-1">
                    <StackPanel Background="Transparent">
                        <Border x:Name="dummyBorder" BorderThickness="1,1,1,0" Panel.ZIndex="1" HorizontalAlignment="Left">
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource MenuColor}" />
                            </Border.Background>
                            <Border.BorderBrush>
                                <LinearGradientBrush>
                                    <GradientStop Color="{DynamicResource BorderColor}" />
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                            <ContentPresenter ContentSource="Header" Margin="6,3,6,3" RecognizesAccessKey="True" />
                        </Border>
                        <Border x:Name="SubmenuBorder" SnapsToDevicePixels="True" BorderThickness="1" Margin="0,-1,0,0">
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource MenuColor}" />
                            </Border.Background>
                            <Border.BorderBrush>
                                <LinearGradientBrush>
                                    <GradientStop Color="{DynamicResource BorderColor}" />
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                            <ScrollViewer CanContentScroll="True" Style="{StaticResource MenuScrollViewer}">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </ScrollViewer>
                        </Border>
                    </StackPanel>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource HoverColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <!--<Trigger SourceName="Popup" Property="IsOpen" Value="True">
                <Setter TargetName="Border" Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource MenuColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>-->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource DisabledForegroundColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- TopLevelItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border">
            <Grid>
                <ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource HoverColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource DisabledForegroundColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" MinWidth="13" MinHeight="13" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
                <Border x:Name="Check" Width="13" Height="13" Visibility="Collapsed" Margin="6,0,6,0" BorderThickness="1">
                    <Path x:Name="CheckMark" Width="7" Height="7" Visibility="Hidden" SnapsToDevicePixels="False" StrokeThickness="2" Data="M 0,3 L 3,6 7,0">
                        <Path.Stroke>
                            <SolidColorBrush Color="{DynamicResource ForegroundColor}" />
                        </Path.Stroke>
                    </Path>
                </Border>
                <ContentPresenter x:Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,0,2" DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource HoverColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource DisabledForegroundColor}" />
                    </Setter.Value>
                </Setter>
                <Setter TargetName="CheckMark" Property="Stroke">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource DisabledForegroundColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuItemHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" MinWidth="13" MinHeight="13" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
                <ContentPresenter x:Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,2,2" DockPanel.Dock="Right" />
                <Path x:Name="Path" Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource RightArrow}">
                    <Path.Fill>
                        <SolidColorBrush Color="{DynamicResource ForegroundColor}" />
                    </Path.Fill>
                </Path>
                <Popup x:Name="Popup"
                       Placement="Right"
                       HorizontalOffset="-4"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True"
                       Focusable="False"
                       PopupAnimation="Fade">
                    <Border x:Name="SubmenuBorder" SnapsToDevicePixels="True" BorderThickness="1">
                        <Border.Background>
                            <SolidColorBrush Color="{DynamicResource MenuColor}" />
                        </Border.Background>
                        <Border.BorderBrush>
                            <LinearGradientBrush>
                                <GradientStop Color="{DynamicResource BorderColor}" />
                            </LinearGradientBrush>
                        </Border.BorderBrush>
                        <ScrollViewer CanContentScroll="True" Style="{StaticResource MenuScrollViewer}">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource HoverColor}" />
                    </Setter.Value>
                </Setter>
                <Setter TargetName="Path" Property="Fill">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource SelectedColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger SourceName="Popup"
             Property="AllowsTransparency"
             Value="True">
                <!--<Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4" />-->
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource DisabledForegroundColor}" />
                    </Setter.Value>
                </Setter>
                <Setter TargetName="Path" Property="Fill">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource DisabledForegroundColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MenuItem Style -->
    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>